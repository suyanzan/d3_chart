<html>
<head>
  <meta charset="utf-8">
  <title>Stacked Bar Chart Example</title>
  <script src="https://d3js.org/d3.v7.min.js"></script>
<!DOCTYPE html>
<html>
<head>
  <title>Line Chart with Tooltip Example</title>
  <style>
    .chart {
      font-family: Arial, sans-serif;
      font-size: 12px;
    }
    
    .line {
      fill: none;
      stroke: #7fc3ff;
      stroke-width: 2;
    }
    
    .tooltip {
      position: absolute;
      padding: 6px;
      background-color: #fff;
      border: 1px solid #ccc;
      pointer-events: none;
      opacity: 0;
    }
  </style>
</head>
<body>
  <svg id="chart"></svg>

  <script src="https://d3js.org/d3.v7.min.js"></script>
  <script>
    // Sample data
    const data = [
      { Year: 2010, Value: 10 },
      { Year: 2011, Value: 20 },
      { Year: 2012, Value: 15 },
      { Year: 2013, Value: 25 },
      { Year: 2014, Value: 18 },
      { Year: 2015, Value: 30 },
      { Year: 2016, Value: 22 }
    ];

    // Set up the chart dimensions
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 600 - margin.left - margin.right;
    const height = 400 - margin.top - margin.bottom;

    // Create SVG element
    const svg = d3.select("#chart")
      .attr("width", width + margin.left + margin.right)
      .attr("height", height + margin.top + margin.bottom)
      .append("g")
      .attr("transform", `translate(${margin.left},${margin.top})`);

    // Create scales
    const xScale = d3.scaleLinear()
      .domain(d3.extent(data, d => d.Year))
      .range([0, width]);

    const yScale = d3.scaleLinear()
      .domain([0, d3.max(data, d => d.Value)])
      .range([height, 0]);

    // Create line generator
    const line = d3.line()
      .x(d => xScale(d.Year))
      .y(d => yScale(d.Value));

    // Append the line
    svg.append("path")
      .datum(data)
      .attr("class", "line")
      .attr("d", line);

    // Create tooltip
    const tooltip = d3.select("body")
      .append("div")
      .attr("class", "tooltip")
      .style("opacity", 0);

    // Append invisible rectangle for capturing mouse events
    svg.append("rect")
      .attr("class", "overlay")
      .attr("width", width)
      .attr("height", height)
      .style("opacity", 0)
      .on("mouseover", () => tooltip.style("opacity", 1))
      .on("mouseout", () => tooltip.style("opacity", 0))
      .on("mousemove", showTooltip);

// Function to show tooltip
function showTooltip(event) {
  const [xValue, yValue] = d3.pointer(event);
  
  tooltip.style("left", `${event.pageX + 10}px`)
    .style("top", `${event.pageY + 10}px`)
    .html(`Year: ${Math.round(xScale.invert(xValue))}, Value: ${Math.round(yScale.invert(yValue))}`);
}


  </script>
</body>
</html>

  </script>
</body>
</html>
