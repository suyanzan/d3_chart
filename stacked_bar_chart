<html>
<head>
  <meta charset="utf-8">
  <title>Stacked Bar Chart Example</title>
  <script src="https://d3js.org/d3.v7.min.js"></script>
</head>
<!-- CSS styles-->
<style>
  .sum-label {
    fill: blue; /* Text color */
    font-weight: bold; /* Bold font */
  }
  .tooltip {
  position: absolute;
  background-color: #f9f9f9;
  border: 1px solid #ccc;
  border-radius: 5px;
  padding: 10px;
  pointer-events: none;
 }
</style>
<body>
  <svg id="chart"></svg>
  <div id="chart-content"></div>
  <script>
    const data = [
      [{ Key: 'PDAY', Value: '2023-05-06' }, { Key: 'PLRC', Value: 1500 }, { Key: 'LRC', Value: 100 },{ Key: 'PRC', Value: 200 },{ Key: 'OPC', Value: 5400 },{ Key: 'Total', Value: 7200 },{ Key: 'License', Value: 8500 }],        
      [{ Key: 'PDAY', Value: '2023-05-07' }, { Key: 'PLRC', Value: 1500 }, { Key: 'LRC', Value: 100 },{ Key: 'PRC', Value: 900 },{ Key: 'OPC', Value: 600 },{ Key: 'Total', Value: 3100 },{ Key: 'License', Value: 8500 }],
      [{ Key: 'PDAY', Value: '2023-05-08' }, { Key: 'PLRC', Value: 1500 }, { Key: 'LRC', Value: 3100 },{ Key: 'PRC', Value: 2000 },{ Key: 'OPC', Value: 4000 },{ Key: 'Total', Value: 10600 },{ Key: 'License', Value: 8500 }],
      [{ Key: 'PDAY', Value: '2023-05-09' }, { Key: 'PLRC', Value: 1500 }, { Key: 'LRC', Value: 100 },{ Key: 'PRC', Value: 1200 },{ Key: 'OPC', Value: 1400 },{ Key: 'Total', Value: 4200 },{ Key: 'License', Value: 8500 }],
      [{ Key: 'PDAY', Value: '2023-05-10' }, { Key: 'PLRC', Value: 1500 }, { Key: 'LRC', Value: 100 },{ Key: 'PRC', Value: 2200 },{ Key: 'OPC', Value: 3100 },{ Key: 'Total', Value: 6900 },{ Key: 'License', Value: 8500 }],
    ];

    // Define the margin, width, and height of the chart
    // modify chart size extra space
    const margin = { top: 30, right: 100, bottom: 30, left: 40 };
    const width = 600 - margin.left - margin.right;
    const height = 400 - margin.top - margin.bottom;

    // Create the SVG element and set its dimensions
    const svg = d3.select("#chart")
      .attr("width", width + margin.left + margin.right)
      .attr("height", height + margin.top + margin.bottom)
      .append("g")
      .attr("transform", `translate(${margin.left},${margin.top})`);
  // Filter out the objects with the 'PDAY' key
    const filteredData = data.map(d => d.filter(p => (p.Key !== 'PDAY' && p.Key !== 'Total'&& p.Key !== 'License')));
const chartData = data.map(d => d.filter(p => (p.Key !== 'PDAY' && p.Key !== 'License')));

const tooltip = d3
  .select("body")
  .append("div")
  .attr("class", "tooltip")
  .style("opacity", 0);
  
// Extract the 'License' values from the data
const licenseValues = data.map(d => d.find(e => e.Key === 'License').Value);

// Define the y-scale using the extracted 'License' values
const yScaleLicense = d3.scaleLinear()
  .range([height, 0])
  .domain([0, d3.max(licenseValues, d => +d)]);
    // Define the x and y scales
    const xScale = d3.scaleBand()
      .range([0, width])
      .padding(0.1)
      .domain(data.map(d => d[0].Value));
    
    const yScale = d3.scaleLinear()
      .range([height, 0])
      .domain([0, d3.max(chartData, d => d3.sum(d, e => e.Value))]);
    // Extract unique values of the remaining keys from the filtered data array
    const uniqueKeys = [...new Set(filteredData.flatMap(d => d.map(p => p.Key)))];
	
    // Define the number of colors you want to generate
    var numberOfColors = uniqueKeys.length;

    // Function to generate unique colors
    function generateUniqueColors(count) {
      var colors = [];
      for (var i = 0; i < count; i++) {
        var color = getRandomColor();
        while (colors.includes(color)) {
          // If the color already exists in the array, generate a new one
          color = getRandomColor();
        }
        colors.push(color);
      }
      return colors;
    }

    // Function to generate a random color
    function getRandomColor() {
      var letters = "0123456789ABCDEF";
      var color = "#";
      for (var i = 0; i < 6; i++) {
        color += letters[Math.floor(Math.random() * 16)];
      }
      return color;
    }

    // Generate unique colors
    var colors = generateUniqueColors(numberOfColors);
    
    // Define a custom color palette based on the unique keys
    const customColors = d3.scaleOrdinal()
      .domain(uniqueKeys)
      .range(colors);

	
    // Define the stack generator
    const stack = d3.stack()
      .keys(filteredData[0].slice(0).map(d => d.Key))
      .value((d, key) => d.find(e => e.Key === key).Value);
    // Define the bars for each group
    const bars = svg.selectAll(".bar-group")
      .data(stack(data))
      .join("g")
      .attr("class", "bar-group")
      .attr("fill", d => customColors(d.key));
    bars.selectAll("rect")
      .data(d => d)
      .join("rect")
      .attr("x", d => xScale(d.data.find(p => p.Key === 'PDAY').Value))
      .attr("y", d => yScale(d[1]))
      .attr("height", d => yScale(d[0]) - yScale(d[1]))
      .attr("width", xScale.bandwidth())  
      .attr("class", (d, i, nodes) => {
        const barGroupColor = d3.select(nodes[i].parentNode).attr("fill");
        return "rect bordered color-" + barGroupColor.substring(1);
      })
      .on("mouseover", function (event, d) {
        const category = d.data.find((item) => item.Key === 'PDAY').Value;
        const value = d[1] - d[0];
        const tooltipHtml = `
          <div>Day: ${category}</div>
          <div>${this.parentNode.__data__.key}: ${value}</div>
        `;
	
      // Show the tooltip
      tooltip.transition().duration(200).style("opacity", 0.9);
      tooltip
          .html(tooltipHtml)
          .style("left", event.pageX + "px")
          .style("top", event.pageY + "px")
          .style("opacity", 0.9);
      })
      .on("mouseout", function (event, d) {
      // Hide the tooltip
        tooltip.transition().duration(200).style("opacity", 0);
      });


    // Add text labels for the sum values
    bars.selectAll(".sum-label")
      .data(d => d)
      .join("text")
      .attr("class", "sum-label")
      .attr("x", d => xScale(d.data.find(p => p.Key === 'PDAY').Value) + xScale.bandwidth() / 2)
      .attr("y", d => yScale(d.data.find(p => p.Key === 'Total').Value)-10) // Adjust the vertical position of the label
      .attr("text-anchor", "middle")
      .text(d => d.data.find(p => p.Key === 'Total').Value);



    // Define the x and y axis
    const xAxis = d3.axisBottom(xScale);
    const yAxis = d3.axisLeft(yScale).ticks(10);

    // Append the x axis to the chart
    svg.append("g")
      .attr("transform", `translate(0,${height})`)
      .call(xAxis);

    // Append the y axis to the chart
    svg.append("g")
      .call(yAxis)
      .append("text")
      .attr("fill", "#000")
      .attr("x", -10)
      .attr("y", -10) // Adjust the value to change the vertical position
      .attr("dy", "0.32em")
      .attr("text-anchor", "start")
      .attr("font-size", "12px")
      .text("License");
    // Create line chart
    const line = d3.line()
      .x(d => xScale(d[0].Value) + xScale.bandwidth() / 2)
      .y(d => yScale(d.find(e => e.Key === 'License').Value));

    svg.append("path")
    .datum(data)
    .attr("class", "line")
    .attr("d", line)
    .attr("fill", "none")
    .attr("stroke-width", 3) // Increase the stroke width to make it bold
    .attr("stroke", "#7fc3ff");
       // Create an array of objects containing the unique values of each key and the 			       corresponding color
       
    svg.selectAll(".dot")
      .data(data)
      .enter()
      .append("circle")
      .attr("class", "dot")
      .attr("cx", d => xScale(d[0].Value) + xScale.bandwidth() / 2)
      .attr("cy", d => yScale(d.find(e => e.Key === 'License').Value))
      .attr("r", 3)
      .on("mouseover", function (event, d) {
       //const category = d.data.find((item) => item.Key === 'PDAY').Value;
      // Show the tooltip
      tooltip.transition().duration(200).style("opacity", 0.9);
      const tooltipHtml = `
          <div>Day:10/15</div>
          <div>License:8500</div>
        `;
      tooltip
          .html(tooltipHtml)
          .style("left", event.pageX + "px")
          .style("top", event.pageY + "px")
          .style("opacity", 0.9);
      })
     .on("mouseout", function (event, d) {
      // Hide the tooltip
        tooltip.transition().duration(200).style("opacity", 0);
      });

      
      const legendData = uniqueKeys.map(key => {
        return {
          key: key,
          color: customColors(key),
          value: filteredData[0].find(p => p.Key === key).Value
        }
    });
    // Define the legend group
    const legend = svg.append("g")
      .attr("class", "legend")
      .attr("transform", `translate(${width + margin.right-100}, ${margin.top})`);

    // Create a legend item for each unique key of the filtered data
    const legendItems = legend.selectAll(".legend-item")
      .data(uniqueKeys)
      .join("g")
      .attr("class", "legend-item")
      .attr("transform", (d, i) => `translate(0, ${i * 20})`);
    // Add a colored rectangle to each legend item
    legendItems.append("rect")
      .attr("x", 0)
      .attr("y", 0)
      .attr("width", 15)
      .attr("height", 15)
      .attr("fill", d => customColors(d))
      .on("mouseover", (event, d, i) => {
        svg.selectAll("rect.color-" + customColors(d).substring(1))
          .attr("stroke-width", 2) // Increase the stroke width to make it bold
          .attr("stroke", "black");
      })
      .on("mouseout", (event, d, i) => {
        svg.selectAll("rect.color-" + customColors(d).substring(1))
          .attr("stroke", "white");
      });
      

    // Add text to each legend item
    legendItems.append("text")
      .attr("x", 20)
      .attr("y", 10)
      .attr("dominant-baseline", "middle")
  	  .text(d => d);
      

</script>
</body>
</html>
